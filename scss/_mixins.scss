$font_intro: "intro_",SansSerif;
$font_robot: Roboto, sans-serif;

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
          to top          : bottom,
          to top right    : bottom left,
          to right top    : left bottom,
          to right        : left,
          to bottom right : top left,
          to right bottom : left top,
          to bottom       : top,
          to bottom left  : top right,
          to left bottom  : right top,
          to left         : right,
          to left top     : right bottom,
          to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin skew($deg){
  -moz-transform:  skewY($deg+deg);
  -ms-transform:  skewY($deg+deg);
  -o-transform:  skewY($deg+deg);
  -webkit-transform: skewY($deg+deg);
  transform: skewY($deg+deg);
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}

@mixin bpt() {
  @media (max-width: 1024px) { @content; }
}
@mixin bpb() {
  @media (max-width: 700px) { @content; }
}
@mixin bpm() {
  @media (max-width: 650px) {@content;}
}
@mixin bpv($width) {
  @media (max-width: $width+px) { @content; }
}
@mixin dn{
  /*display: none;*/
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}




@mixin transform($name,$value){
  -webkit-transform:$name+'('+$value+')';
  -moz-transform:$name+'('+$value+')';
  -ms-transform:$name+'('+$value+')';
  -o-transform:$name+'('+$value+')';
  transform:$name+'('+$value+')';
}

@mixin scale($size){
  -webkit-transform:scale($size);
  -moz-transform:scale($size);
  -ms-transform:scale($size);
  -o-transform:scale($size);
  transform:scale($size);
}
@mixin animation($name,$time,$speed:linear,$count:infinite){
    -webkit-animation: $name $time $speed $count;
    -moz-animation: $name $time $speed $count;
    -ms-animation: $name $time $speed $count;
    -o-animation: $name $time $speed $count;
    animation: $name $time $speed $count;
}